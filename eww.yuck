(defwidget centeredText [?text]
  (box :orientation "horizontal"
       :halign "center"
    :class "time" text))

(defvar notifOpen false)
(defvar wifiWindow false)

(defvar time-visible false)

(defpoll time :interval "20s"
              :initial "initial-value"  ; optional, defaults to poll at startup
              :run-while notifOpen   ; optional, defaults to 'true'
  `date +%H:%M%p`)

(defpoll playerTitle :interval "5s"
              :initial "initial-value"  ; optional, defaults to poll at startup
              :run-while notifOpen
  `playerctl metadata xesam:title`)
(defpoll playerArtist :interval "5s"
              :initial "initial-value"  ; optional, defaults to poll at startup
              :run-while notifOpen
  `playerctl metadata xesam:artist`)


(deflisten playerImg
              :initial "/tmp/temp.png"  ; optional, defaults to poll at startup
  `./music_info`)

(defwidget navButton [?button command c] 
  (button :class "navButton ${c}"
          :onclick command
          :timeout "500ms"
          :valign "center"
          :halign "center"
          :width 50
          :height 50
    button)
  )

(defwidget buttonsContainer [?b1 cmd1 class1 b2 cmd2 class2 b3 cmd3 class3]
  (box :orientation "horizontal"
       :halign "center"
       :valign "start"
       :width 250
       :height 60
       :class "ButtonsContainer"
       (navButton :button b1 :command cmd1 :c class1)
       (navButton :button b2 :command cmd2 :c class2)
       (navButton :button b3 :command cmd3 :c class3)
       )

  )

(defwidget volumeControl [? orient]
  (box :space-evenly false :orientation orient
       :valign "center" :class "brightBox r1B2" :halign "center"
      (label :class "brigh-ic" :valign "center" :text "󰕾")
       (scale        :min 0.0
                     :round-digits 1
                     ;; :width 240
                     :height 240
                     :max 2
                     :orientation orient
                     :class "brightCtl"
                     :onchange "playerctl volume {}")))

(defwidget brightnessControl [? orient]
  (box :space-evenly false :orientation orient
       :valign "center" :class "brightBox r2B2" :halign "center"
      (label :class "brigh-ic" :valign "center" :halign "center" :text "󰃠")
       (scale        :min 1
                     :draw-value false
                     :value 5
                     ;; :width 240
                     :height 240
                     :max 100
                     :orientation orient
                     :class "brightCtl"
                     :onchange "brightnessctl s {}%")))

(defvar calendarTrigger false)
(defvar notificationTrigger false)

(defwidget notification []
      (button :class 'notif' :width 300
       (box :orientation 'horizontal' :space-evenly false
          (image :image-width 80 :image-height 80 :path './Rust.png')
          (box :orientation 'vertical'
            (label :width "100%" :wrap true :class 'title' :text '{item.summary or ''}')
            (label :width "100%" :wrap true :class 'body' :text '{item.body or ''}')
      )))
  )

(defvar selectedItem "Select a network")
(defvar selectedClass "")
(defvar networks "(label :text 'Press Refresh to load' :class 'default_label' :wrap false)")


(defwidget menu []
    (revealer
    :transition "slideleft"
    :reveal true
    :duration "1000ms"
      (box :orientation "vertical"
           :space-evenly false
        (box :orientation "horizontal" :halign "fill" :space-evenly true 

            (button :width 20 :height 20 :onclick "python network.py" :class "navButton r1B1 netButton" :timeout "6000ms"  "󰑓" )
            (button :width 20 :height 20 :onclick "eww -c . close inputWindow" :class "navButton r1B1 netButton" "")

          )
        (label :class "menuTitle r2B2" :text selectedItem)
        (input :password true :width 200 :class 'passInput r2B1' :placeholder "Password"
            :onaccept "nmcli device wifi connect ${selectedItem} password {}"
          )
            (box :orientation "vertical" :space-evenly false :hexpand false
            (literal :content networks)
            )
        ))
     )


  

(deflisten notifs :initial ""
  `python ./dbus_Notif.py`)

(defwindow inputWindow
  :monitor 0
  :geometry (geometry :x "21%"
                      :y "10%"
                      :width "10%"
                      :anchor "top right")
            :stacking "fg"
  :focusable "true"
  (box :orientation "vertical"
    (menu)
    )
  )

(defwidget playerInfo []
  (box :orientation "horizontal" :space-evenly false :valign "center" :vexpand false
    (box :orientation "vertical" :space-evenly false
      (box :orientation "vertical" :style "font-size:15px; padding:5px; margin-top:25px" :class "navButton" (label :class "navButtons" :wrap true :limit-width 15 :text playerTitle)
(label :class "navButtons" :wrap true :limit-width 15 :text playerArtist)
        )
    (image :style "margin-top:25px;" :image-width 150 :image-height 150 :path playerImg)
      )
  )
)

(defwidget playerControl []
  (box :orientation "vertical" :space-evenly false :style "margin-top:30px;"
  (box :halign "center" :orientation "horizontal" :valign "center" :class "playerControl"
    (button :width 50 :height 50 :class "navButton r1B3" :onclick "playerctl previous" :timeout "500ms" "󰼨")
    (button :width 50 :height 50 :class "navButton r1B3" :onclick "playerctl play-pause" :timeout "500ms" "󱖐")
    (button :width 50 :height 50 :class "navButton r1B3" :onclick "playerctl next" :timeout "500ms" "󰼧")
    )
    (playerInfo)
    )
  )

(defwidget thingControl []
  (box 
      (volumeControl :orient "vertical")
      (brightnessControl :orient "vertical")
    )
  )

(defwidget playerctl []
    (box :orientation "horizontal"
         :halign "baseline" :valign "start"
      (playerControl)
      (thingControl)
    )
  )

(defwindow notifT
            :monitor 0
            :geometry (geometry :x "1%"
                                :y "2%"
                                :width "10%"
                                :anchor "top right")
            :stacking "fg"
            (revealer :reveal notifOpen
                      :transition "slideleft"
                      :duration "100ms"
              
            (box :orientation "vertical"
                 :space-evenly false
                 :class "NotificationArea"
                 :width 350
              (buttonsContainer :b1 "⏻" :cmd1 "systemctl poweroff" :class1 "r1B1"
                                :b2 "" :cmd2 "systemctl reboot" :class2 "r1B2"
                                :b3 "󰗽" :cmd3 "hyprctl dispatch exit" :class3 "r1B3")
              (buttonsContainer :b1 "󰂱" :cmd1 "notify-send 'HOLA'" :class1 "r2B1"
                                :b2 "󰤨" :cmd2 "python network.py &&eww -c . open inputWindow" :class2 "r2B2"
                                :b3 "" :cmd3 "systemctl suspend" :class3 "r2B3")
              ;; (brightnessControl)
              ;; (volumeControl)
              (playerctl)
              ;; (notification)

                            (eventbox
                :onhover "eww -c . update notificationTrigger=true"
                :class "cal-ev"
                (label :class "notiflabel r2B1" :text " Notifications ")
               )
              (revealer :vexpand false
                        :reveal notificationTrigger
                        :transition "slidedown"
                   :class "CalendarContainer"
              (eventbox
                :onhoverlost "eww -c . update notificationTrigger=false"
                (literal :content {strlength(notifs) > 30 ? notifs : "(label :class 'Nonotiflabel' :text 'No Notifications')"})
               )
                )


              (eventbox
                :onhover "eww -c . update calendarTrigger=true"
                :valign "center"
                :halign "center"
                :class "cal-ev"
                (label :class "CalendarLabel" :text time)
               )
              (revealer :vexpand false
                        :reveal calendarTrigger
                        :transition "slidedown"
                   :class "CalendarContainer"
              (eventbox
                :onhoverlost "eww -c . update calendarTrigger=false"
                (calendar :visible true :class "calendar")
               )
               )

   ))
  )
